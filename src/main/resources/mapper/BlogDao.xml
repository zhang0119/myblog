<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.myblog.dao.BlogDao">

    <sql id="BASE_TABLE">
        t_blog
    </sql>

    <sql id="BASE_COLUMN">
        id,title,content,first_picture,flag,views,comment_count,appreciation,share_statement,
        comment_able,published,recommend,create_time,update_time,type_id,user_id,description
    </sql>

    <!--int saveBlog(Blog blog);-->
    <insert id="saveBlog" parameterType="blog">
        insert into t_blog(id,title,content,first_picture,flag,views,
        comment_count,appreciation,share_statement,comment_able,published,
        recommend,create_time,update_time,type_id,user_id,description)
        values(#{id},#{title},#{content},#{firstPicture},#{flag},#{views},
               #{commentCount},#{appreciation},#{shareStatement},#{commentAble},#{published},
               #{recommend},#{createTime},#{updateTime},#{typeId},#{userId},#{description});
    </insert>

    <!--List<BlogQuery> getAllBlogQuery();
        查询文章列表多对一配置
        resultMap属性：用于映射查询结果，这里定义封装BlogQuery的resultMap
        association属性：用于一对一和多对一的关系，把Type实体映射从association元素中提取出来，
        用一个resultMap元素表示
        javaType属性：用来指定对象所属的java数据类型
    -->
    <resultMap id="blog" type="com.example.myblog.queryvo.BlogQuery">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="updateTime" column="update_time"/>
        <result property="recommend" column="recommend"/>
        <result property="published" column="published"/>
        <result property="typeId" column="type_id"/>
        <association property="type" javaType="com.example.myblog.entity.Type">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
        </association>
    </resultMap>

    <!--查询文章管理列表-->
    <select id="getAllBlogQuery" resultMap="blog">
        select b.id,b.title,b.update_time,b.recommend,b.published,b.type_id,
        t.id,t.name
        from
        t_blog b
        left outer join
        t_type t
        on b.type_id = t.id
        order by b.update_time desc
    </select>

    <!--删除博客void deleteBlog(Long id);-->
    <delete id="deleteBlog">
        delete from t_blog where id = #{id}
    </delete>

    <!--ShowBlog getBlogById(Long id);-->
    <select id="getBlogById" resultType="com.example.myblog.queryvo.ShowBlog">
        select b.id,b.flag,b.title,b.content,b.type_id,
               b.first_picture,b.description,b.recommend,
               b.published,b.share_statement,b.appreciation,b.comment_able
        from
        t_blog b
        where
        b.id = #{id};
    </select>

    <!--
    编辑修改文章
    int updateBlog(ShowBlog showBlog)-->
    <update id="updateBlog" parameterType="com.example.myblog.queryvo.ShowBlog">
        update t_blog set published = #{published},flag=#{flag},title=#{title},
        content=#{content},type_id=#{typeId},first_picture = #{firstPicture},
        description = #{description},recommend = #{recommend},
        share_statement = #{shareStatement}, appreciation = #{appreciation},
        comment_able= #{commentAble} ,update_time = #{updateTime} where id = #{id};
    </update>

    <!--List<BlogQuery> searchByTitleAndType(SearchBlog searchBlog);-->
    <select id="searchByTitleAndType" parameterType="com.example.myblog.queryvo.SearchBlog" resultMap="blog">
        <bind name="pattern" value="'%' + title + '%'" />
        select b.id,b.title,b.update_time,b.recommend,b.type_id,t.id,t.name from t_blog b ,t_type t
        <where>
            <if test="1 == 1">
                b.type_id = t.id
            </if>
            <if test="typeId != null">
                and b.type_id = #{typeId}
            </if>
            <if test="title != null">
                and b.title like #{pattern}
            </if>
        </where>
    </select>



</mapper>